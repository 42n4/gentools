# KLUCZEPGP
# https://github.com/drduh/YubiKey-Guide
# https://support.yubico.com/support/solutions/articles/15000006420-using-your-yubikey-with-openpgp
gpg --full-generate-key
addkey 8 E S Q 4096 0 y y 
your_name your@email O(key)
# sec   rsa4096/<YOUR_KEY>
export KEYID=<YOUR_KEY>
#add subkeys
gpg --expert --edit-key $KEYID
# subkey to sign
addkey 4 Q 4096 1y y y 
# subkey to encrypt
addkey 6 Q 4096 1y y y 
# subkeuy to authenticate
addkey 8 S E A Q 1y y y  
# again uid
# adduid N C E
save

#edycja yubikey
gpg --card-status
gpg --card-edit
admin help name lang <pl> sex url login passwd
2 (ustaw pin)
Q list quit

#yubikey add pgp key
gpg --edit-key piotrwasiewiczeu@gmail.com
toggle
key 1 (choose sign)
#backup klucza
keytocard
key 1 #unset
key 2
keytocard (choose encrypt)
key 2 #unset
key 3
keytocard (choose authenticate)
save

# https://riseup.net/en/security/message-security/openpgp/best-practices
# https://help.ubuntu.com/community/GnuPrivacyGuardHowto
# https://www.jabberwocky.com/software/paperkey/
gpg --list-keys --keyid-format LONG
gpg --list-secret-keys --keyid-format LONG
# sec   rsa4096/<YOUR_KEY>
# or
# pub   rsa4096/<YOUR_KEY>
export KEYID=<YOUR_KEY>
# save backups in the encrypted place
gpg --armor --export-secret-key  $KEYID > privatekey.key
gpg --armor --export-secret-keys $KEYID > privatemastersub.key
gpg --armor --export-secret-subkeys $KEYID > privatesub.key
gpg --armor --export $KEYID > publicmastersub.key
# remove your key from local gpg repo
gpg --delete-secret-key $KEYID
gpg --delete-key $KEYID
# recover your private key from the hidden file
gpg --import privatekey.txt
# to revoke your key - save it safely
gpg --output ./revoke$KEYID.asc --gen-revoke $KEYID
# import revoke file and send key to servers - it will make your key useless
# wysłanie klucza gpg na public serwer (tylko część publiczna)
gpg --keyserver keys.gnupg.net --keyserver-options honor-http-proxy --send-key $KEYID
wget -O ~/.gnupg/sks-keyservers.netCA.pem https://sks-keyservers.net/sks-keyservers.netCA.pem
wget -O ~/.gnupg/gpg.conf https://gist.githubusercontent.com/42n4/278539c6d2f9c3ed4460fba5d7221f69/raw/1c29f7543b497a2f061182280134830993cf2f6d/gpg.conf
# with proper gpg
gpg --send-key $KEYID
gpg --keyserver pgp.mit.edu --send-key $KEYID
gpg --keyserver keys.gnupg.net --send-key $KEYID
gpg --keyserver hkps://keyserver.ubuntu.com:443 --send-key $KEYID
#search for your key on servers
gpg --search-keys <YOUR_PGP_EMAIL>
# gpg --receive-keys $KEYID
# To create ASCII files, just add the --clearsign option to the beginning of the command. 
gpg --output encrypted_doc.gpg --encrypt --recipient lmpinto@dei.uc.pt doc_to_encrypt
gpg --output signed_doc.gpg --sign --recipient lmpinto@dei.uc.pt doc_to_sign
gpg --output encrypted_doc.gpg --encrypt --sign --recipient lmpinto@dei.uc.pt doc_to_encrypt_and_sign
gpg --output document --decrypt encrypted_doc.gpg
# Keyservers:
keys.gnupg.net
hkp://subkeys.pgp.net (server pool)
http://pgp.mit.edu
hkp://pool.sks-keyservers.net (server pool, also supports secured key requests over TLS: hkps://hkps.pool.sks-keyservers.net)
hkp://zimmermann.mayfirst.org (also supports secured key requests over TLS)
http://keyserver.ubuntu.com

#ENTROPY
#https://www.digitalocean.com/community/tutorials/how-to-setup-additional-entropy-for-cloud-servers-using-haveged
cat /proc/sys/kernel/random/entropy_avail

#USES OF PGP KEY
echo "test message string" | gpg --encrypt --armor --recipient $KEYID -o encrypted.txt
gpg --decrypt --armor encrypted.txt

echo "test message string" | gpg --armor --clearsign > signed.txt
gpg --verify signed.txt

gpg --list-keys
git config user.signingKey $KEYID
git config --global user.signingKey $KEYID
# write to ~/.gitconfig
git log --show-signature
git show --show-signature
git config --global commit.gpgsign true
git config --global alias.cs "commit -S -a"
git config --global alias.logs "log --show-signature"
git config --global alias.shows "show --show-signature"
git verify-commit --raw $COMMIT_ID
# https://github.com/git/git/blob/master/Documentation/pretty-formats.txt#L153-L224
git log --show-signature --pretty=format:"%H %ae %n %G?  %GS %GK"

# KLUCZE SSH
mkdir ~/.ssh/github
ssh-keygen -t rsa -b 4096 -N '' -C<YOUR_EMAIL> -f ~/.ssh/github/id_rsa

# test github ssh
ssh -vT git@github.com
git remote set-url origin git@github.com:<Username>/<Project>.git
# you can git push now


# AES in SSH
openssl speed aes-128-cbc
openssl engine -c -tt
dd if=/dev/zero count=100 bs=1M | ssh -c aes128-cbc localhost "cat >/dev/null"


# ONLYKEY
wget https://raw.githubusercontent.com/trustcrypto/trustcrypto.github.io/master/49-onlykey.rules -O /etc/udev/rules.d/49-onlykey.rules


# https://keybase.io/pwasiewi
keybase id pwasiewi
keybase logout
keybase login pwasiewi
keybase prove pwasiewi
keybase status
keybase device
keybase device list
keybase passphrase recover
keybase pgp drop ID
keybase pgp select
keybase pgp import
keybase pgp gen
# after starting keybase encrypted repo
git clone keybase://private/pwasiewi/encrypted


cryptsetup luksFormat /dev/sdx3
cryptsetup open /dev/sdx3 encrypted
mkfs.btrfs /dev/mapper/encrypted
cryptsetup close /dev/mapper/encrypted
# podaj nazwę partycji w btrfs zlib i katalog w /mnt np.: unzlib sdx3 ca
unzlib sdx3 ca 
# zablokuj zaszyfrowany usb
lock sdx3 ca 


export GPG_TTY="$(tty)"
#export SSH_AUTH_SOCK="/run/user/$UID/gnupg/S.gpg-agent.ssh"
export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
gpg-connect-agent updatestartuptty /bye


# https://wiki.gentoo.org/wiki/Systemd
# add gpg to systemd
